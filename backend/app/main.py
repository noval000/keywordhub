from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import logging
import os
from contextlib import asynccontextmanager

from .config import settings
from .routers import (
    auth,
    projects,
    dictionaries,
    queries,
    cluster_registry,
    content_plan,
    project_members,
    access,
    analytics,
    doctor_parser
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
def run_migrations():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""

    if not settings.AUTO_MIGRATE:
        logger.info("‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (AUTO_MIGRATE=false)")
        return True

    try:
        import subprocess
        import os

        logger.info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ subprocess...")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ subprocess —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        env = os.environ.copy()
        env['ALEMBIC_DATABASE_URL'] = settings.ALEMBIC_DATABASE_URL

        result = subprocess.run(
            ['alembic', 'upgrade', 'head'],
            capture_output=True,
            text=True,
            timeout=60,  # –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
            env=env,
            cwd='/app'
        )

        if result.returncode == 0:
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            if result.stdout:
                logger.info(f"üìã –í—ã–≤–æ–¥: {result.stdout}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
            return False

    except subprocess.TimeoutExpired:
        logger.error("‚è∞ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (60 —Å–µ–∫)")
        return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")

        if settings.FAIL_ON_MIGRATION_ERROR:
            raise
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False

# Lifespan –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Starting KeywordHub API...")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
    try:
        migration_success = run_migrations()
        if not migration_success:
            logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        from .db import init_db
        await init_db()
        logger.info("‚úÖ Database initialized successfully")
    except Exception as e:
        logger.error(f"üí• Database initialization failed: {e}")
        raise

    logger.info("‚úÖ Application startup completed")

    yield

    # Shutdown
    logger.info("üõë Shutting down KeywordHub API...")
    try:
        from .db import close_db_connections
        await close_db_connections()
        logger.info("‚úÖ Database connections closed")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Error during shutdown: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å lifespan
app = FastAPI(
    title=settings.APP_NAME,
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏, –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞–º–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤—Ä–∞—á–µ–π",
    version="1.0.0",
    lifespan=lifespan  # –ò—Å–ø–æ–ª—å–∑—É–µ–º lifespan –≤–º–µ—Å—Ç–æ on_event
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins_list,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
app.include_router(auth.router)
app.include_router(projects.router)
app.include_router(dictionaries.router)
app.include_router(queries.router)
app.include_router(cluster_registry.router)
app.include_router(content_plan.router)
app.include_router(project_members.router)
app.include_router(access.router)
app.include_router(analytics.router)
app.include_router(doctor_parser.router)

@app.get("/")
async def root():
    """–ë–∞–∑–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    return {
        "message": f"Welcome to {settings.APP_NAME}",
        "status": "running",
        "version": "1.0.0",
        "features": [
            "Project Management",
            "Content Planning",
            "Analytics",
            "Doctor Parser"
        ]
    }

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from .db import check_database_connection
        db_status = await check_database_connection()
        return {
            "status": "healthy" if db_status else "degraded",
            "database": "connected" if db_status else "disconnected",
            "services": {
                "api": "running",
                "database": "connected" if db_status else "disconnected",
                "parser": "available"
            },
            "version": "1.0.0"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e)
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level=settings.LOG_LEVEL.lower()
    )