import uuid
from typing import Optional
from uuid import UUID

from fastapi import APIRouter, Depends, HTTPException, status, Form, Body
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel

from ..deps import get_current_user
from ..db import get_db
from ..models import User
from ..schemas import UserCreate, TokenOut
from ..security import hash_password, verify_password, create_access_token

router = APIRouter(prefix="/auth", tags=["auth"])

@router.post("/register", response_model=TokenOut)
async def register(payload: UserCreate, db: AsyncSession = Depends(get_db)):
    # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ ‚Äî –¥–µ–ª–∞–µ–º –µ–≥–æ —Å—É–ø–µ—Ä—é–∑–µ—Ä–æ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –±—É—Ç—Å—Ç—Ä–∞–ø–∞
    cnt = (await db.execute(select(func.count()).select_from(User))).scalar_one()
    exists = (await db.execute(select(User).where(User.email == payload.email))).scalar_one_or_none()
    if exists:
        raise HTTPException(status_code=400, detail="Email already registered")

    u = User(
        id=uuid.uuid4(),
        email=payload.email.strip().lower(),
        name=payload.name,
        password_hash=hash_password(payload.password),
        is_active=True,
        is_superuser=(cnt == 0),
        can_view_all_content=False,
    )
    db.add(u)
    await db.commit()

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å), –¥–∞–µ–º –µ–º—É admin —Ä–æ–ª—å –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    if cnt == 0:
        from .access import set_user_page_roles, PAGES
        admin_roles = {page: "admin" for page in PAGES}
        set_user_page_roles(u.id, admin_roles)

        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        from app.models import PageAccess
        for page in PAGES:
            page_access = PageAccess(user_id=u.id, page=page)
            db.add(page_access)
        await db.commit()

    token = create_access_token(u.id)
    return TokenOut(access_token=token)

@router.post("/login", response_model=TokenOut)
async def login(form: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    user = (await db.execute(select(User).where(User.email == form.username.strip().lower()))).scalar_one_or_none()
    if not user or not user.password_hash or not verify_password(form.password, user.password_hash):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")
    if not user.is_active:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User inactive")
    token = create_access_token(user.id)
    return TokenOut(access_token=token)

@router.get("/users")
async def list_users(db: AsyncSession = Depends(get_db), current=Depends(get_current_user)):
    # –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
    if not getattr(current, "is_superuser", False):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin —Ä–æ–ª—å —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        from .access import get_user_page_roles
        user_roles = get_user_page_roles(current.id)
        has_admin_role = any(role == "admin" for role in user_roles.values())

        if not has_admin_role:
            raise HTTPException(403, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–æ–ª—è–º–∏
    q = select(User.id, User.email, User.name, User.is_active, User.is_superuser, User.can_view_all_content)
    rows = (await db.execute(q)).all()

    from .access import get_user_page_roles
    result = []
    for r in rows:
        user_roles = get_user_page_roles(r.id)
        result.append({
            "id": str(r.id),
            "email": r.email,
            "name": r.name,
            "is_active": r.is_active,
            "is_superuser": r.is_superuser,
            "can_view_all_content": r.can_view_all_content,
            "page_roles": user_roles,  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        })

    return result

class UserContentAccessUpdate(BaseModel):
    can_view_all_content: bool

@router.get("/users/authors")
async def list_authors(db: AsyncSession = Depends(get_db), current=Depends(get_current_user)):
    # –î–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
    q = select(User.id, User.email, User.name).where(User.is_active == True)
    rows = (await db.execute(q)).all()
    return [
        {
            "id": str(r.id),
            "email": r.email,
            "name": r.name,
            "full_name": r.name,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UserSelect –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
            "is_active": True,
        }
        for r in rows
    ]

@router.patch("/users/{user_id}/content-access")
async def update_user_content_access(
    user_id: UUID,
    payload: UserContentAccessUpdate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""

    import logging
    logger = logging.getLogger(__name__)

    logger.info(f"üîÑ Updating content access for user {user_id}")
    logger.info(f"  Payload: {payload}")  # –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"  New can_view_all_content: {payload.can_view_all_content}")
    logger.info(f"  Requested by: {current_user.id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ admin —Ä–æ–ª—å –Ω–∞ content_plan
    if not current_user.is_superuser:
        from .access import get_user_page_roles
        user_roles = get_user_page_roles(current_user.id)
        content_plan_role = user_roles.get("content_plan", "viewer")

        if content_plan_role != "admin":
            raise HTTPException(403, "–ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    logger.info(f"  Current can_view_all_content: {getattr(user, 'can_view_all_content', 'NOT_SET')}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    user.can_view_all_content = payload.can_view_all_content

    try:
        await db.commit()
        await db.refresh(user)
        logger.info(f"  Successfully updated can_view_all_content: {user.can_view_all_content}")
    except Exception as e:
        await db.rollback()
        logger.error(f"Error updating user content access: {e}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")

    return {
        "success": True,
        "can_view_all_content": user.can_view_all_content,
        "user_id": str(user_id)
    }

@router.get("/me")
async def get_current_user_info(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤–∫–ª—é—á–∞—è —Ä–æ–ª–∏"""
    from .access import get_user_page_roles
    user_roles = get_user_page_roles(current_user.id)

    return {
        "id": str(current_user.id),
        "email": current_user.email,
        "name": current_user.name,
        "is_active": current_user.is_active,
        "is_superuser": current_user.is_superuser,
        "can_view_all_content": getattr(current_user, 'can_view_all_content', False),
        "page_roles": user_roles,
    }

@router.get("/users/{user_id}/permissions")
async def get_user_permissions(
    user_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not current_user.is_superuser and current_user.id != user_id:
        from .access import get_user_page_roles
        user_roles = get_user_page_roles(current_user.id)
        has_admin_role = any(role == "admin" for role in user_roles.values())

        if not has_admin_role:
            raise HTTPException(403, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    user = (await db.execute(select(User).where(User.id == user_id))).scalar_one_or_none()
    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    from .access import get_user_page_roles, check_role_permissions, PAGES
    user_roles = get_user_page_roles(user_id)

    permissions = {}
    for page in PAGES:
        page_role = user_roles.get(page, "viewer")
        permissions[page] = {
            "role": page_role,
            "can_view": check_role_permissions(page_role, "view"),
            "can_create": check_role_permissions(page_role, "create"),
            "can_edit": check_role_permissions(page_role, "edit"),
            "can_delete": check_role_permissions(page_role, "delete"),
            "can_import": check_role_permissions(page_role, "import"),
        }

    return {
        "user": {
            "id": str(user.id),
            "email": user.email,
            "name": user.name,
            "is_superuser": user.is_superuser,
            "can_view_all_content": getattr(user, 'can_view_all_content', False),
        },
        "permissions": permissions
    }
