#!/usr/bin/env bash
set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ KeywordHub API..."

# –ñ–¥–µ–º –ë–î
echo "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
python - <<'PY'
import os, time, psycopg2
host=os.getenv("POSTGRES_HOST","db")
port=int(os.getenv("POSTGRES_PORT","5432"))
user=os.getenv("POSTGRES_USER","app")
pwd=os.getenv("POSTGRES_PASSWORD","app")
db=os.getenv("POSTGRES_DB","keywordhub")
print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} –∫–∞–∫ {user} –∫ –ë–î {db}")
for i in range(30):
    try:
        conn = psycopg2.connect(host=host, port=port, user=user, password=pwd, dbname=db)
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
        break
    except Exception as e:
        print(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}/30: {e}")
        time.sleep(1)
else:
    print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫")
    raise SystemExit("DB not ready")
PY

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å—Ö–µ–º—ã..."
python - <<'PY'
import psycopg2
import os

try:
    conn = psycopg2.connect(
        host=os.getenv("POSTGRES_HOST","db"),
        port=int(os.getenv("POSTGRES_PORT","5432")),
        user=os.getenv("POSTGRES_USER","app"),
        password=os.getenv("POSTGRES_PASSWORD","app"),
        dbname=os.getenv("POSTGRES_DB","keywordhub")
    )

    cur = conn.cursor()

    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    old_indexes = [
        'ix_doctor_profiles_url',
        'ix_doctor_profiles_clinic',
        'ix_doctor_profiles_descriptions',
        'ix_doctor_profiles_specializations',
        'ix_doctor_profiles_is_parsed',
        'ix_doctor_profiles_parsed_at'
    ]

    for index_name in old_indexes:
        try:
            cur.execute(f'DROP INDEX IF EXISTS {index_name} CASCADE')
            print(f"‚úÖ Dropped: {index_name}")
        except Exception as e:
            print(f"‚ö†Ô∏è {index_name}: {e}")

    print("üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –±–∞–∑–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    cur.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = 'parsing_tasks'
        )
    """)

    if cur.fetchone()[0]:
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ parsing_tasks...")
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        cur.execute("""
            DO $$
            BEGIN
                -- –î–æ–±–∞–≤–ª—è–µ–º task_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                              WHERE table_name='parsing_tasks' AND column_name='task_id') THEN
                    ALTER TABLE parsing_tasks ADD COLUMN task_id UUID DEFAULT gen_random_uuid();
                    ALTER TABLE parsing_tasks ADD CONSTRAINT uq_parsing_tasks_task_id UNIQUE (task_id);
                END IF;

                -- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                IF EXISTS (SELECT 1 FROM information_schema.columns
                          WHERE table_name='parsing_tasks' AND column_name='urls_count') THEN
                    ALTER TABLE parsing_tasks RENAME COLUMN urls_count TO total_profiles;
                END IF;

                IF EXISTS (SELECT 1 FROM information_schema.columns
                          WHERE table_name='parsing_tasks' AND column_name='completed_count') THEN
                    ALTER TABLE parsing_tasks RENAME COLUMN completed_count TO processed_profiles;
                END IF;
            END $$;
        """)
    else:
        print("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ parsing_tasks...")
        # –°–æ–∑–¥–∞–µ–º —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cur.execute('''
            CREATE TABLE parsing_tasks (
                id SERIAL PRIMARY KEY,
                task_id UUID UNIQUE NOT NULL DEFAULT gen_random_uuid(),
                status VARCHAR(50) DEFAULT 'pending',
                total_profiles INTEGER DEFAULT 0,
                processed_profiles INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP NULL,
                error_message TEXT NULL
            );
        ''')

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è doctor_profiles
    cur.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = 'doctor_profiles'
        )
    """)

    if cur.fetchone()[0]:
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ doctor_profiles...")
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        cur.execute("""
            DO $$
            BEGIN
                -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS url CASCADE;
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS clinic CASCADE;
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS descriptions CASCADE;
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS specializations CASCADE;
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS raw_html CASCADE;
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS is_parsed CASCADE;
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS parsed_at CASCADE;
                ALTER TABLE doctor_profiles DROP COLUMN IF EXISTS error_message CASCADE;

                -- –î–æ–±–∞–≤–ª—è–µ–º task_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns
                              WHERE table_name='doctor_profiles' AND column_name='task_id') THEN
                    ALTER TABLE doctor_profiles ADD COLUMN task_id UUID;
                END IF;

                -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS specialization VARCHAR(255);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS experience VARCHAR(100);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS education TEXT;
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS workplace VARCHAR(500);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS rating VARCHAR(10);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS reviews_count VARCHAR(50);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS phone VARCHAR(50);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS address VARCHAR(500);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS profile_url VARCHAR(1000);
                ALTER TABLE doctor_profiles ADD COLUMN IF NOT EXISTS parsing_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
            END $$;
        """)
    else:
        print("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ doctor_profiles...")
        # –°–æ–∑–¥–∞–µ–º —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cur.execute('''
            CREATE TABLE doctor_profiles (
                id SERIAL PRIMARY KEY,
                task_id UUID REFERENCES parsing_tasks(task_id),
                name VARCHAR(255) NOT NULL DEFAULT '',
                specialization VARCHAR(255),
                experience VARCHAR(100),
                education TEXT,
                workplace VARCHAR(500),
                rating VARCHAR(10),
                reviews_count VARCHAR(50),
                phone VARCHAR(50),
                address VARCHAR(500),
                profile_url VARCHAR(1000),
                parsing_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    print("üìá –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
    new_indexes = [
        'CREATE INDEX IF NOT EXISTS ix_parsing_tasks_id ON parsing_tasks (id)',
        'CREATE INDEX IF NOT EXISTS ix_parsing_tasks_task_id ON parsing_tasks (task_id)',
        'CREATE INDEX IF NOT EXISTS ix_doctor_profiles_id ON doctor_profiles (id)',
        'CREATE INDEX IF NOT EXISTS ix_doctor_profiles_task_id ON doctor_profiles (task_id)',
        'CREATE INDEX IF NOT EXISTS ix_doctor_profiles_name ON doctor_profiles (name)',
        'CREATE INDEX IF NOT EXISTS ix_doctor_profiles_specialization ON doctor_profiles (specialization)',
        'CREATE INDEX IF NOT EXISTS ix_doctor_profiles_parsing_date ON doctor_profiles (parsing_date)',
        'CREATE INDEX IF NOT EXISTS ix_doctor_profiles_profile_url ON doctor_profiles (profile_url)'
    ]

    for index_sql in new_indexes:
        try:
            cur.execute(index_sql)
        except Exception as e:
            print(f"‚ö†Ô∏è Index error: {e}")

    conn.commit()
    cur.close()
    conn.close()

    print("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")

except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ö–µ–º—ã: {e}")
PY

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Chromium –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Chromium..."
python - <<'PY'
import os

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Chrome
chrome_paths = [
    '/usr/bin/google-chrome-stable',
    '/usr/bin/google-chrome',
    '/usr/bin/chromium',
    '/usr/bin/chromium-browser'
]

chrome_found = False
for path in chrome_paths:
    if os.path.exists(path):
        print(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω: {path}")
        os.environ['PUPPETEER_EXECUTABLE_PATH'] = path
        chrome_found = True
        break

if not chrome_found:
    print("‚ö†Ô∏è Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
else:
    print("‚úÖ Chromium –≥–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
PY

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic –ü–û–°–õ–ï –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ö–µ–º—ã
echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
alembic upgrade head || echo "‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"

echo "üéØ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞..."

# –ó–∞–ø—É—Å–∫ API
exec uvicorn app.main:app --host 0.0.0.0 --port 8000 --log-level info